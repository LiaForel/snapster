LOGIN METHOD: login

Parameters (username : string, password : string, ip_address : string)

return_value -> status_message['status']

    a) 'success': indicates a successful login and session generation,
        token can be retrieved from status_message['token']
        redirect user to application page

    b) 'invalid': indicates the user entered invalid credentials, redirect them to login page and tell them to try again

    c)  'fail': the login procedure failed for one of several reasons, redirect user to login page and tell them
        to try again


-----------------------------------------------------------------------------------------------------------------------

REGISTER METHOD: register

Parameters(username: string, email : string, password : string)

return_value -> status_message['status']

    a) 'success': indicates successful user registration, and session generation,
        token can be retrieved from status_message['token'],
        redirect user to application page

    b) 'user-added': indicates successful user registration but unsuccessful session generation
        redirect user to login page

    c) 'user-exists': the username entered by the user already exists

    c) 'fail': the registration procedure failed for one of several reasons, redirect user to registration page and tell
        them to try again

-----------------------------------------------------------------------------------------------------------------------

VALIDATE SESSION: validate_session

Parameters(session token: string)

return_value -> status_message['status']
    
    a) 'success': The user is still in a valid session, proceed with route logic
    b) 'invalid_token': The user's session_token is invalid, it may have expired, or the user tampered with it, 
        redirect to login page 
    c) 'fail': The session validation procedure failed due to an unknown reason, possible connection loss from 
        redis instance, redirect to login page


-----------------------------------------------------------------------------------------------------------------------

LOGOUT: logout

Parameters(session token: string)

return_value -> status_message['status']

    a) 'success': The user was in a valid session, and now their session token has been revoked, logout was successful, 
        redirect to the login or home page
    b) 'unauthorized': The user was not in a valid session, redirect them to the home or login page
    c) 'unknown': some unknown logic error, an invalid number of keys were deleted, user is now in unauthenticated state, 
        redirect to the home/login page
    d) 'fail': Redis connection error, user is still in authenticated state, inform them the logout was unsuccessful


-----------------------------------------------------------------------------------------------------------------------

SEND MESSAGE: send_message

Parameters(session_token: string, media_id: integer, subject: string, message_body: string)

return_value -> status_message['status']

    a) 'success': The message was successfully 'sent', inform the user
    b) 'invalid_token': see 'VALIDATE SESSION'
    c) 'fail': could be one of several reasons, database/redis errors, inform the user their message was not sent and 
        suggest they try again 
    d) 'no_media': The media item to which this message corresponds does not exist, could indicate the user
        tampered with the media_id or other logic errors, inform the user the message was not sent and tell them 
        to try again

-----------------------------------------------------------------------------------------------------------------------

GET ALL MESSAGES: get_all_messages

Parameters(session_token: string)

return_value -> status_message['status']

    a) 'success': All of the user's messages were successfully retrieved
        i) check status_message['message-list'] for a python list of the messages, the messages are ordered
            with the latest messages in the beginning, each message is a python dictionary of the form
            {
                'message-id': <the message identifier>,
                'subject': <message subject>
                'time_stamp': python datetime object of the time and date the message was sent
                'sender': the username of the sender of the message
                'seen': a boolean (True or False) indicating whether this message was viewed by the
                        recipient yet
            }
    b) 'invalid_token': see 'VALIDATE SESSION'

    c) 'fail': could be one of several reasons, database/redis errors, inform the user that we were not able
        to retrieve their messages and ask them to try again

-----------------------------------------------------------------------------------------------------------------------

GET SPECIFIC MESSAGE BY ID: get_message_by_id

Parameters(session_token: string, message_id: integer)

return_value -> status_message['status']

    a) 'success': The message referenced by the provided message_id was successfully retrieved, check the
        rest of the following keys in the status_message dictionary to assemble message object
        i)      'subject': <messages subject>
        ii)     'time_stamp': python datetime object of the time and date the message was sent
        iii)    'sender': the username of the sender of the message
        iv)     'message_body': the body of the message
        v)      'media_id': the specific media_id of the media item this message pertains to

    b) 'unauthorized': The message was not intended for the person requesting to view it, could indicate
        possible tampering with the message_id field, tell the user the message could not be retrieved

    c) 'fail': could be one of several reasons, database/redis errors, inform the user that we were not
        able to retrieve this particular message and ask them to try again

    d) 'invalid-message-id': There doesn't exist a message with this particular message_id, could
        indicate tampering with the message_id field, tell the user the message could not be retrieved

    e) 'invalid_token': see 'VALIDATE SESSION'
